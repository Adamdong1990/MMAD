be
LENGTH(be)
length(be)
coef
boot_data
coxmm(
data=boot_data, time=time, status=status, be=be, Maxiter = Maxiter,
convergence = convergence, bootstrap = FALSE, b = b, method = method)
data=da$x;time=da$t;status=da$I;be=be.in;bootstrap = TRUE
coxmm(data, time, status, be, convergence=1e-8, b=50, method = "NPro")
data[boot_rows, 1]
sample(nrow(data), nrow(data), replace = TRUE)
sample(nrow(data), nrow(data), replace = TRUE)
rm(list=ls())
sam=function(n,be,th,la){
q=length(be)
x=matrix(rnorm(n*q,-1,1),n,q)
u=runif(n)
t=-log(u)/(la*exp(x%*%be))
#t=(exp(-log(u)/exp(x%*%be))-1)/la
cen=3.7
I=1*(t<=cen)
t=pmin(t,cen)
return(list(x=x,I=I,t=t))
}
n=500;q=3
be.true=matrix(c(-0.5,1,2),ncol=1)
t.true=c(0.1,0.5)
LA.TRUE=2*t.true
be.in=be.true*0.5
da=sam(n,be=be.true,la=2)
data=da$x;time=da$t;status=da$I;be=be.in;bootstrap = TRUE
result = coxmm(data, time, status, be, convergence=1e-8, b=100, method = "NPro")
summary.cox(result)
o.data
data
sample(nrow(data), nrow(data), replace = TRUE)
boot_rows <- sample(nrow(data), nrow(data), replace = TRUE)
data[boot_rows, ]
boot_data <- data[boot_rows, ]
document()
document()
rm(list=ls())
sam=function(n,be,th,la){
q=length(be)
x=matrix(rnorm(n*q,-1,1),n,q)
u=runif(n)
t=-log(u)/(la*exp(x%*%be))
#t=(exp(-log(u)/exp(x%*%be))-1)/la
cen=3.7
I=1*(t<=cen)
t=pmin(t,cen)
return(list(x=x,I=I,t=t))
}
n=500;q=3
be.true=matrix(c(-0.5,1,2),ncol=1)
t.true=c(0.1,0.5)
LA.TRUE=2*t.true
be.in=be.true*0.5
da=sam(n,be=be.true,la=2)
data=da$x;time=da$t;status=da$I;be=be.in;bootstrap = TRUE
result = coxmm(data, time, status, be, convergence=1e-8, b=100, method = "NPro")
da$t
da$I
coxmm(data, time, status, be, convergence=1e-8, b=100, method = "NPro")
status
time
data
nrow(data)
boot_rows <- sample(nrow(data), nrow(data), replace = TRUE)
data[boot_rows, ]
data[boot_rows, ]
time[boot_rows, ]
document()
rm(list=ls())
sam=function(n,be,th,la){
q=length(be)
x=matrix(rnorm(n*q,-1,1),n,q)
u=runif(n)
t=-log(u)/(la*exp(x%*%be))
#t=(exp(-log(u)/exp(x%*%be))-1)/la
cen=3.7
I=1*(t<=cen)
t=pmin(t,cen)
return(list(x=x,I=I,t=t))
}
n=500;q=3
be.true=matrix(c(-0.5,1,2),ncol=1)
t.true=c(0.1,0.5)
LA.TRUE=2*t.true
be.in=be.true*0.5
da=sam(n,be=be.true,la=2)
data=da$x;time=da$t;status=da$I;be=be.in;bootstrap = TRUE
result = coxmm(data, time, status, be, convergence=1e-8, b=100, method = "NPro")
summary.cox(result)
setwd=("c:/code")
rm(list=ls())
setwd=("c:/code")
wd=read.csv("12.csv")
wd=read.csv("12.csv")
read.csv("12.csv")
setwd("c:/code")
wd = read.csv("12.csv")
wd
wd[X1]
wd[1]
wd[[1]]
wd[[1:25]]
wd[[1,25]]
wd[2,]
wd[,2]
wd[,2:4]
as.matrix(wd[,1:25])
wd[time]
wd[,time]
wd[,"time"]
X = as.matrix(wd[,1:25])
time = wd[,"time"]
status = wd[,"status"]
rep(1,25)
data=X;be=matrix(rep(1,25),ncol=1);bootstrap = TRUE
coxmm(data, time, status, be, convergence=1e-8, b=100, method = "Pro")
data
rm(list=ls())
sam=function(n,be,th,la){
q=length(be)
x=matrix(rnorm(n*q,-1,1),n,q)
u=runif(n)
t=-log(u)/(la*exp(x%*%be))
#t=(exp(-log(u)/exp(x%*%be))-1)/la
cen=3.7
I=1*(t<=cen)
t=pmin(t,cen)
return(list(x=x,I=I,t=t))
}
n=500;q=3
be.true=matrix(c(-0.5,1,2),ncol=1)
t.true=c(0.1,0.5)
LA.TRUE=2*t.true
be.in=be.true*0.5
da=sam(n,be=be.true,la=2)
data=da$x;time=da$t;status=da$I;be=be.in;bootstrap = TRUE
data
rm(list=ls())
wd = read.csv("12.csv")
X = as.matrix(wd[,1:25])
time = wd[,"time"]
status = wd[,"status"]
data=X;be=matrix(rep(0,25),ncol=1);bootstrap = TRUE
coxmm(data, time, status, be, convergence=1e-8, b=100, method = "Pro")
be=matrix(rep(0.5,25),ncol=1)
coxmm(data, time, status, be, convergence=1e-8, b=100, method = "Pro")
rm(list=ls())
sam=function(n,be,th,la){
q=length(be)
x=matrix(rnorm(n*q,-1,1),n,q)
u=runif(n)
t=-log(u)/(la*exp(x%*%be))
#t=(exp(-log(u)/exp(x%*%be))-1)/la
cen=3.7
I=1*(t<=cen)
t=pmin(t,cen)
return(list(x=x,I=I,t=t))
}
n=500;q=3
be.true=matrix(c(-0.5,1,2),ncol=1)
t.true=c(0.1,0.5)
LA.TRUE=2*t.true
be.in=be.true*0.5
da=sam(n,be=be.true,la=2)
data=da$x;time=da$t;status=da$I;be=be.in;bootstrap = TRUE
time
status
as.matrix(wd[,"time"])
rm(list=ls())
wd = read.csv("12.csv")
X = as.matrix(wd[,1:25])
time = as.matrix(wd[,"time"])
status = as.matrix(wd[,"status"])
status
data=X;be=matrix(rep(0.5,25),ncol=1);bootstrap = TRUE
coxmm(data, time, status, be, convergence=1e-8, b=100, method = "Pro")
x=data; t=time; I=status
n=dim(x)[1]
q=dim(x)[2]
n
q
LA=vector(length=n)
for(i in 1:n){
LA[i]=sum(la*(t<=t[i]))
}
la=rep(1/n,n)
LA=vector(length=n)
for(i in 1:n){
LA[i]=sum(la*(t<=t[i]))
}
AE=exp(x%*%be)
newla=vector(length=n)
for(i in 1:n){
newla[i]=I[i]/sum(AE*(t>=t[i]))
}
b=LA*exp(x%*%be)
de=abs(x)/matrix(apply(abs(x),1,sum),n,q)
newbe=vector(length=q)
for(p in 1:q){
f1=sum(I*x[,p]-x[,p]*b)
f2=-sum(2*x[,p]*x[,p]*b/de[,p])
newbe[p]=be[p]-f1/f2
}
a1=(la*exp(x%*%be))^I
a2=LA*exp(x%*%be)
lfun=sum(log(a1)-a2)
newLA=vector(length=n)
for(i in 1:n){
newLA[i]=sum(newla*(t<=t[i]))
}
a1=(newla*exp(x%*%newbe))^I
a2=newLA*exp(x%*%newbe)
newlfun=sum(log(a1)-a2)
eps=abs(newlfun-lfun)/(abs(lfun)+1)
list(newbe=newbe, newla=newla, newLA=newLA, eps=eps)
LA*exp(x%*%be)
x
be=matrix(rep(5,25),ncol=1)
coxmm(data, time, status, be, convergence=1e-8, b=100, method = "Pro")
la
LA
exp(x%*%be)
x%*%be
wd[30,17]
wd[30,17]=0.8876
wd[30,17]
coxmm(data, time, status, be, convergence=1e-8, b=100, method = "Pro")
rm(list=ls())
wd = read.csv("12.csv")
wd[30,17]=0.8876
X = as.matrix(wd[,1:25])
time = as.matrix(wd[,"time"])
status = as.matrix(wd[,"status"])
data=X;be=matrix(rep(5,25),ncol=1);bootstrap = TRUE
coxmm(data, time, status, be, convergence=1e-8, b=100, method = "Pro")
data[30,17]
x=data; t=time; I=status
n=dim(x)[1]
q=dim(x)[2]
la=rep(1/n,n)
LA=vector(length=n)
LA
for(i in 1:n){
LA[i]=sum(la*(t<=t[i]))
}
LA
AE=exp(x%*%be)
AE
x%*%be
rm(list=ls())
wd = read.csv("12.csv")
wd[30,17]=0.8876
X = as.matrix(wd[,1:24])
time = as.matrix(wd[,"time"])
status = as.matrix(wd[,"status"])
data=X;be=matrix(rep(5,25),ncol=1);bootstrap = TRUE
coxmm(data, time, status, be, convergence=1e-8, b=100, method = "Pro")
rm(list=ls())
wd = read.csv("12.csv")
wd[30,17]=0.8876
X = as.matrix(wd[,1:24])
time = as.matrix(wd[,"time"])
status = as.matrix(wd[,"status"])
data=X;be=matrix(rep(1,24),ncol=1);bootstrap = TRUE
coxmm(data, time, status, be, convergence=1e-8, b=100, method = "Pro")
x=data; t=time; I=status
n=dim(x)[1]
q=dim(x)[2]
# compute LA
la=rep(1/n,n)
LA=vector(length=n)
for(i in 1:n){
LA[i]=sum(la*(t<=t[i]))
}
AE=exp(x%*%be)
newla=vector(length=n)
for(i in 1:n){
newla[i]=I[i]/sum(AE*(t>=t[i]))
}
LA*exp(x%*%be)
x
be
x%*%be
library(devtools)
load_all()
sam=function(n,be,th,la){
q=length(be)
x=matrix(rnorm(n*q,-1,1),n,q)
u=runif(n)
t=-log(u)/(la*exp(x%*%be))
#t=(exp(-log(u)/exp(x%*%be))-1)/la
cen=3.7
I=1*(t<=cen)
t=pmin(t,cen)
return(list(x=x,I=I,t=t))
}
n=500;q=3
be.true=matrix(c(-0.5,1,2),ncol=1)
t.true=c(0.1,0.5)
LA.TRUE=2*t.true
be.in=be.true*0.5
da=sam(n,be=be.true,la=2)
data=da$x;time=da$t;status=da$I;be=be.in;bootstrap = TRUE
result = coxmm(data, time, status, be, convergence=1e-8, b=1000, method = "Pro")
summary.cox(result)
result = coxmm(data, time, status, be, convergence=1e-8, b=2000, method = "Pro")
summary.cox(result)
library(devtools)
load_all()
rm(list=ls())
sam=function(n,be,th,la){
q=length(be)
x=matrix(rnorm(n*q,-1,1),n,q)
u=runif(n)
t=-log(u)/(la*exp(x%*%be))
#t=(exp(-log(u)/exp(x%*%be))-1)/la
cen=3.7
I=1*(t<=cen)
t=pmin(t,cen)
return(list(x=x,I=I,t=t))
}
n=200;q=3
be.true=matrix(c(-0.5,1,2),ncol=1)
t.true=c(0.1,0.5)
LA.TRUE=2*t.true
be.in=be.true*0.5
da=sam(n,be=be.true,la=2)
data=da$x;time=da$t;status=da$I;be=be.in;bootstrap = TRUE
result = coxmm(data, time, status, be, convergence=1e-6, b=1000, method = "Pro")
summary.cox(result)
library(devtools)
load_all()
usethis::use_r("FrailtyPro.R")
document()
usethis::use_r("LogLik.R")
document()
usethis::use_r("HessianF.R")
document()
usethis::use_r("GaFrailtyMM.R")
document()
usethis::use_r("summary.GaFrailtyMM.R")
document()
file.rename("R/summary.R","R/summary.GaFrailtyMM.R")
usethis::use_r("demo/GaF-demo.R")
file.create("demo/GaF-demo.R")
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 1000, convergence = 1e-06)
library(survival)
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 1000, convergence = 1e-06)
summary.GaFrailtyMM(gf)
mod <- coxph(Surv(time, status) ~ age + sex + frailty.gamma(id, eps=1e-6, method="em", sparse=0),
outer.max=1000, iter.max=10000,
data=kidney)
mod
gf
gf$print_k
library(frailtyHL)
kidney_g02<-frailtyHL(Surv(time,status)~sex+age+(1|id),kidney,RandDist="Gamma",mord=0,dord=2)
library(frailtyEM)
emfrail(formula = Surv(time, status) ~ sex + age + cluster(id),
data = kidney, distribution = emfrail_dist(dist = "gamma"))
document()
document()
document()
document()
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 500, convergence = 1e-06)
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 1000, convergence = 1e-06)
summary.GaFrailtyMM(gf)
document()
beta = rep(1, 2)
theta = 1
N=76
lambda = rep(1/N, N)
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 1000, beta, theta, lambda)
summary.GaFrailtyMM(gf)
beta = rep(0, 2)
theta = 1
N=76
lambda = rep(1/N, N)
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 1000, beta, theta, lambda)
summary.GaFrailtyMM(gf)
gf$print_k
beta = rep(0, 2)
theta = 0.4
N=76
lambda = rep(1/N, N)
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 1000, beta, theta, lambda)
summary.GaFrailtyMM(gf)
gf$print_k
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 1000, convergence = 1e-06)
summary.GaFrailtyMM(gf)
gf$print_k
beta = rep(0, 2)
theta = 1
N=76
lambda = rep(1/N, N)
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 1000, beta, theta, lambda)
summary.GaFrailtyMM(gf)
gf$print_k
kidney_g02<-frailtyHL(Surv(time,status)~sex+age+(1|id),kidney,RandDist="Gamma",mord=0,dord=2)
coxph(Surv(time, status) ~ age + sex + frailty.gamma(id, eps=1e-6, method="em", sparse=0),
outer.max=1000, iter.max=10000,
data=kidney)
emfrail(formula = Surv(time, status) ~ sex + age + cluster(id),
data = kidney, distribution = emfrail_dist(dist = "gamma"))
beta = c(0.00522, -1.58326)
theta = 0.408
N=76
lambda = rep(1/N, N)
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 1000, beta, theta, lambda)
summary.GaFrailtyMM(gf)
gf$print_k
document()
docum
docu
tempdir()
dir.create(tempdir())
document()
document()
document()
library("knitr")
library("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
devtools::install_github("tjmahr/WrapRmd")
devtools::check(manual = TRUE)
devtools::build()
devtools::build_manual(pkg = "MMAD", path = 'C:/mypkg/manual./doc')
devtools::build_manual(pkg = ".", path = 'C:/mypkg/manual./doc')
devtools::build_manual(pkg = "C:\mypkg\MMad", path = '')
devtools::build_manual(pkg = "C:/mypkg/MMad", path = '')
devtools::build(manual = TRUE)
devtools::build_manual()
document()
devtools::build_manual()
document()
document()
rm(list=ls())
sam=function(n,be,th,la){
q=length(be)
x=matrix(rnorm(n*q,-1,1),n,q)
u=runif(n)
t=-log(u)/(la*exp(x%*%be))
#t=(exp(-log(u)/exp(x%*%be))-1)/la
cen=3.7
I=1*(t<=cen)
t=pmin(t,cen)
return(list(x=x,I=I,t=t))
}
n=200;q=3
be.true=matrix(c(-0.5,1,2),ncol=1)
t.true=c(0.1,0.5)
LA.TRUE=2*t.true
be.in=be.true*0.5
da=sam(n,be=be.true,la=2)
data=da$x;time=da$t;status=da$I;be=be.in;bootstrap = TRUE
data
time
status
document()
time
status
data
devtools::build_manual()
gf = GaFrailtyMM(Surv(time, status) ~ age + sex + cluster(id), data=kidney, Maxiter = 1000, convergence = 1e-06)
summary.GaFrailtyMM(gf)
document()
rm(list=ls())
sam=function(n,be,th,la){
q=length(be)
x=matrix(rnorm(n*q,-1,1),n,q)
u=runif(n)
t=-log(u)/(la*exp(x%*%be))
#t=(exp(-log(u)/exp(x%*%be))-1)/la
cen=3.7
I=1*(t<=cen)
t=pmin(t,cen)
return(list(x=x,I=I,t=t))
}
n=200;q=3
be.true=matrix(c(-0.5,1,2),ncol=1)
t.true=c(0.1,0.5)
LA.TRUE=2*t.true
be.in=be.true*0.5
da=sam(n,be=be.true,la=2)
x=da$x;time=da$t;status=da$I;be=be.in;bootstrap = TRUE
x
data.frame(x,status,time)
data = data.frame(x,status,time)
result = coxmm(Surv(time, status) ~ x, data, be, convergence=1e-6, b=100, method = "Pro")
data
coxmm(Surv(time, status) ~ x, data, be, convergence=1e-6, b=100, method = "NPro")
coxmm(Surv(time, status) ~ x, data, be, Maxiter = 500,  convergence=1e-6, b=100, method = "NPro")
time
status
class(status)
coxmm(Surv(time, status) ~ x, data, be, Maxiter = 5000,  convergence=1e-6, b=100, method = "NPro")
be
x
data = data.frame(x,status,time)
time
status
x
data.frame(x,status,time)
coxmm(Surv(time, status) ~ X1+X2+X3, data, be, Maxiter = 1000,  convergence=1e-6, b=100, method = "NPro")
data
be
