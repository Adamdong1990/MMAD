#' Title
#'
#' @param data a data frame containing the variables of the model
#' @param time for right censored data
#' @param status The status indicator, normally 0=alive, 1=dead.
#' @param be a vector of regression parameters
#' @param Maxiter The maximum iterations
#' @param convergence convergence value
#' @param bootstrap bootstrap
#' @param b number of bootstrap iterations for the estimation of the standard errors
#' @param method Profile or Non Profile
#' @param ...
#'
#' @return requires a value
#' @export
#'
#' @examples
#' data = matrix(rnorm(10*1,-1,1),10,1)
#' be = 0.5
#' u=runif(10); time=-log(u)/(la*exp(x%*%be))
#' cen=3.7; status=1*(t<=cen)
#' CoxMM(data, time, status, be)
CoxMM <- function(formula, data, beta=NULL, Maxiter = 500, convergence = 1e-06, bootstrap = TRUE, b = 100, ...)
{
  if (missing(formula) || class(formula) != "formula")
  { stop("'formula' is missing or incorrect") }
  if (missing(data) || class(data) != "data.frame")
  { stop("'data' is missing or not an object of type data.frame") }

  result <- list()
  mf <- model.frame(formula, data)
  mx <- model.matrix(formula, data)

  status_id <- grep("status", names(mf))
  if(length(status_id) != 1)
  { stop("misspecified or non-specified status") }

  time_id <- grep("time", names(mf))
  if(length(time_id) != 1)
  { stop("misspecified or non-specified time") }

  o.formula <- formula
  o.data <- data
  o.beta <- beta
  se <- ci <- NULL

  X <- mx[,-c(1), drop=FALSE]
  namesX <- colnames(X)
  n = dim(data)[1]
  q = length(namesX)
  time = matrix(mf[[1]][, 1], c(n, 1), byrow = TRUE)
  status = matrix(mf[[1]][, 2], c(n, 1), byrow = TRUE)

  x = matrix(X, n, q)
  event = sum(status)
  if (is.null(beta) == TRUE)
  { be = matrix(rep(0, q), ncol=1)
  } else {
    be = matrix(beta, ncol=1)
  }

  la = rep(1/n, n)
  eps = 1

  for (k in 1:Maxiter)
  {
    if (eps > convergence)
    {
      re=CoxProfile(x, status, time, be, la)

      be=re$newbe
      la=re$newla
      LA=re$newLA
      eps=re$eps
      newlfun=re$newlfun
    }
  }
  if (eps > convergence)
  { stop("Convergence result: Did not converge, try adjust 'Maxiter' or 'convergence'.") }

  if (bootstrap == TRUE)
  {
    result_se <- Std.Est(
      formula,
      data = o.data,
      beta = o.beta,
      Maxiter = Maxiter,
      convergence = convergence,
      bootstrap = bootstrap,
      b = b
    )

    se <- result_se$se
    ci <- result_se$ci
  }

  # construct a Wald-type bootstrap confidence interval, if approximately normally distributed
  # Wald-type bootstrap CI is
  ci_lower <- be - se*1.96
  ci_upper <- be + se*1.96

  result <- list()
  result$call <- match.call()
  result$n <- n
  result$event <- event
  result$namesX <- namesX
  result$be <- be
  result$la <- la
  result$LA <- LA
  result$eps <- eps
  result$loglik <- newlfun
  result$se <- se
  result$ci <- ci
  result$ci_lower <- ci_lower
  result$ci_upper <- ci_upper

  return(result)
}
